Abstraction means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation. 


This is a  C++ program to demonstrate the working of Abstraction.

/////////////////////////////////////////////////////////////
#include <iostream>
using namespace std;

class implementAbstraction {
private:
	int a, b;

public:
	// method to set values of
	// private members
	void set(int x, int y)
	{
		a = x;
		b = y;
	}

	void display()
	{
		cout << "a = " << a << endl;
		cout << "b = " << b << endl;
	}
};

int main()
{
	implementAbstraction obj;
	obj.set(10, 20);
	obj.display();
	return 0;
}

----------------------------------
----------------------------

Output:
a = 10
b = 20

//////////////////////////////////////////////////////////////////////////////////////////////

example 2


#include<iostream>
using namespace std;

class Vehicle
{
	public:
		void company()
		{
			cout<<"Toyota\n";
		}
	public:
		void model()
		{
			cout<<"Liva\n";
		}
	public:
		void color()
		{
			cout<<"Black/White/Silver\n";
		}
	public:
		void cost()
		{
			cout<<"Rs. 60000 to 900000\n";
		}
	public:
		void oil()
		{
			cout<<"PETROL\n";
		}
	private:
		void piston()
		{
			cout<<"4 piston\n";
		}
	private:
		void manWhoMade()
		{
			cout<<"Mark Tyson\n";
		}
};
int main()
{
	
	Vehicle obj;
	obj.company();
	obj.model();
	obj.color();
	obj.cost();
	obj.oil();
}


-----------------------------------
------------------------------
Output:

Toyota
Liva
Black/White/Silver
Rs. 60000 to 900000
PETROL
/////////////////////////////////////////////////////////////////////////////
